# This python program can only run on the raspberry pi

import os
import requests
import json
import datetime
import glob
import time
from RPLCD.gpio import CharLCD
import RPi.GPIO as GPIO

lcd = CharLCD(cols=16, rows=2, pin_rs=37, pin_e=35, pins_data=[33, 31, 29, 23],numbering_mode=GPIO.BOARD)

os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]
device_file = device_folder + '/w1_slave'

def read_temp_raw():
    f = open(device_file, 'r')
    lines = f.readlines()
    f.close()
    return lines

def submit_temp_to_server(temprature):
        now= datetime.datetime.now()
        timeStamp = now.strftime('%Y-%m-%d %H:%M:%S')
        url = "https://3agy2aan5j.execute-api.us-east-1.amazonaws.com/dev/record_temperature"
        sensorID = "PI-01"
        payload = { "SENSOR_ID": sensorID,
        "TEMPERATURE_CAPTURE_TS": timeStamp,
        "TEMPERATURE_READING": temprature}
        response = requests.post(url = url, data = json.dumps(payload)) 
        print(timeStamp,temprature, response.status_code)

#FAHRENHEIT CALCULATION
def read_temp_f():
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_f = (int(temp_string) / 1000.0) * 9.0 / 5.0 + 32.0 # TEMP_STRING IS THE SENSOR OUTPUT, MAKE SURE IT'S AN INTEGER TO DO THE MATH
        temp_f = str(round(temp_f, 1)) # ROUND THE RESULT TO 1 PLACE AFTER THE DECIMAL, THEN CONVERT IT TO A STRING
        submit_temp_to_server(temp_f)
        return temp_f

while True:
    lcd.cursor_pos = (1, 0)
    lcd.write_string("Temp: " + read_temp_f() + unichr(223) + "F")

